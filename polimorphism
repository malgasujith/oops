class Dog:
    def speak(self):
        return "Woof!"

class Cat:
    def speak(self):
        return "Meow!"

def animal_speak(animal):
    print(animal.speak())

dog = Dog()
cat = Cat()
animal_speak(dog)  # Woof!
animal_speak(cat)  # Meow!

# Operator Overloading

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

    def __str__(self):
        return f"({self.x}, {self.y})"


p1 = Point(1, 2)
p2 = Point(3, 4)
p3 = p1 + p2
print(p3)     

(*  Method Overriding *)

class Parent:
    def greet(self):
        print("Hello from Parent!")

class Child(Parent):
    def greet(self):
        print("Hello from Child!")


obj = Child()
obj.greet() 

(* Method Overloading (Achieved through default arguments or *args) *)
class Calculator:
    def add(self, a, b, c=0):
        return a + b + c

# Example Usage
calc = Calculator()
print(calc.add(1, 2))      # Output: 3
print(calc.add(1, 2, 3))   # Output: 6


